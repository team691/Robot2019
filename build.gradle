plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.4.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.team691.robot2019.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact("frcJava") {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact("frcStaticFileDeploy") {
            // The directory below is the local directory to deploy
            files = fileTree(dir: "src/main/deploy")
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = "/home/lvuser/deploy"
        }
    }
}

def javadocsDir = "$buildDir/doc/"
task getJavadocs {
    doLast {
        ant.echo(message: "Getting latest javadocs...")
        configurations.cjavadocs.collect {
            def name = javadocsDir + it.getName()
            def dir = name.substring(0, name.lastIndexOf('.'))
            if (!(new File(dir).exists()))
                ant.unzip(src: it, dest: dir)
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    //mavenCentral()
}

configurations {
    cjavadocs {
        def deps = wpi.deps.wpilib()
        String[] dep
        for (String s : deps) {
            dep = s.split(":")
            exclude group: dep[0], module: dep[1]
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    //testCompile 'junit:junit:4.12'
    cjavadocs jdocs()
}

String[] jdocs() {
    def docs = ['edu.wpi.first.wpilibj:documentation:+@zip']
    def vdeps = wpi.deps.vendor.java()
    for (String s : vdeps) {
        docs += (s + ':javadoc')
    }
    return docs
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
